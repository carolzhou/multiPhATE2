# File multiPhate.config controls execution of the multiPhATE driver of the PhATE pipeline.
# The rules of the game:
#    List your genomes as shown below: (e.g., Genome NNN), followed by the 5 required parameters.
#    Include the slash after the name of your output subdirectory (e.g., MyPhageOutDir/)
#    It is best to use numbering (e.g., Genome 1, etc).
#    When naming your genomes, do not use special characters or spaces.
#    Name your genome's fasta file with file extension ".fasta".
#    You may name the multiPhate.config file as you like, "multiPhate.config" is suggested.
# Invoke multiPhate as follows:  $ python multiPhate.py multiPhate.config

# List your genomes here. Below are examples; insert your own data. To include more than 2 genomes,
# Replicate the 6 lines "Genome X" through "output_subdir" as many times as needed.
# The following parameter values must be unique: genome_file, genome_name, output_subdir.
# Genome fasta files must be saved to the PipelineInput/ directory.
# Your genome name must be alphanumeric (including '_') with no spaces! This string will be used to name files
Genome List: 
Genome 1 
genome_file='Eb_P2.fasta'
genome_type='phage'
genome_species='Eb_P2_phage'
Genome 2 
genome_file='Eb_WPhi.fasta'
genome_type='phage'
genome_species='Eb_WPhi_phage'
Genome 3 
genome_file='Ec_pro483.fasta'
genome_type='phage'
genome_species='Ec_pro483_phage'
END of list

#######################################################################################################
# First, check whether your databases (see below, under PhATE annotation) are correctly configured.
# MultiPhATE2 will attempt to find and verify each database, then will exit without further processing.
# Set check_databases to false once you have fixed any incorrectly configured database locations.

check_databases='true'

########################################################################################################
# GENE PREDICTION

# Protein-coding Genes
# Choices for gene calling are: phanotate, genemarks, prodigal, glimmer, and custom.
# Turn individual <caller>_calls on or off (specify: 'true' or 'false').
# Set genemarks_calls to 'false' if you don't have a license for that software.
# Custom genecall output must be in GFF3 format, with file extension '.gff3'.
# Any custom genecall output file(s) to be used must be saved to the PipelineInput/ directory.
# Each custom genecall output file will be recognized as follows: name.custom.gff, where name is
#    the name you gave your genome's output subdirectory (above, under Genome List). 
#    Example: Eb_P2.custom.gff  (Note that "Eb_P2" is the subdir name, and is followed a period '.')
#    There is a sample custom gene-called outfile in the multiPhATE2 distribution (see, Eb_P2.custom.gff).
#    Caution: Name your custom genecall output file(s) correctly, else they will not be recognized.
#    Exactly one custom genecall output file per genome is allowed, but not every genome
#    need have a custom genecall file; if phate cannot find the custom genecall output file for a 
#    given genome, then custom calls will be ignored for that genome.
# The primary_calls parameter specifies which gene caller's output will be used for functional annotation.
#    Choices are: 'phanotate','genemarks','prodigal','glimmer','custom','consensus','superset','commoncore'.
#    If you choose 'consensus', a consensus genecall set will be computed from the gene callers 
#    that were run. If you choose 'superset', a non-redundant superset of the callers' outputs
#    will be computed. If you choose 'commoncore', only the universally common gene calls will be used.
#    If you choose 'custom', then you must provide a correctly named custom genecall file for each genome.
phanotate_calls='false'
prodigal_calls='false'
glimmer_calls='false'
genemarks_calls='false'
genemarks_path=''
custom_gene_calls='false'
primary_calls='phanotate'  

# tRNA Gene Prediction - Set to true if you want to search for tRNA genes
trnascan='true'

# Processing information: for gene-calling (followed by translation) only, set translate only line to true
# It is recommended that you first do gene calling, without functional annotation (blast, hmm) in order to
# examine the results of gene finding and possibly compare results between multiple gene callers. Then,
# you may select the most satisfactory gene caller, and proceed with functional annotation using those calls. 
# To perform gene calling followed by functional annotation, set translate_only='false'.
genetic_code='11'
translate_only='false'

##########################################################################################################
# PhATE ANNOTATION

# SEQUENCE DATABASE SEARCHES 

# Blast parameters
blastn_identity='60'
blastp_identity='60'
blastn_hit_count='5'
blastp_hit_count='5'

# Genomes: ncbi_virus_blast
# Blastn will be run against the virus genome database
ncbi_virus_genome_blast='false'

# Genes: vog_gene_blast 
# Blastn will be run against the gene database
vog_gene_blast='false'

# Proteins: pvogs_blast, vog_protein_blast, phantome_blast, kegg_virus_blast, swissprot_blast,
# refseq_protein_blast, ncbi_virus_protein_blast, nr_blast, cazy_blast.
# Select blastp and/or phmmer, jackhmmer to be run against any/all of the fasta blast databases. 
# Note: Set kegg_virus_blast to 'false' unless you have a license for that database (see README).
# Note: Some of these databases are huge: use with caution, as processing will require long 
# processing times.

# First, set the programs you want to run. Blastp searches blast-formatted protein databases.
# Phmmer and jackhmmer perform hmm searches against protein fasta sequence databases.
# Databases to be searched must be specified below.
blastp='false'
phmmer='false'
jackhmmer='false'

# Now set which databases to use:
pvogs_blast='false'
vog_protein_blast='false'
phantome_blast='false'
kegg_virus_blast='false'         
swissprot_blast='false'
refseq_protein_blast='false'
ncbi_virus_protein_blast='false' 
nr_blast='false'                 
cazy_blast='false'

# Fasta blast database Locations 
# Specify locations of your local instances of fasta and blast-formatted databases; use full
# path/filename for the sequence database (e.g., pVOGs.faa), unless your database is segmented;
# in that case, specify the "root" name of the database (e.g., nr). Recall that the VOG protein
# and gene databases need to be pre-processed, in order to search against the "tagged" data 
# sets (see README).
ncbi_virus_genome_database_path=''
ncbi_virus_protein_database_path=''
kegg_virus_database_path='/<fill in>/T40000.pep'
phantome_database_path=''
pvogs_database_path=''
vog_gene_database_path=''
vog_protein_database_path=''
swissprot_database_path=''
refseq_protein_database_path=''
nr_database_path=''
cazy_database_path=''
cazy_annotation_path=''

# Custom blast processing
# Here, you are providing your own fasta databases. Note that the multiPhATE2 database-
# location pre-check (see above) will not verify a segmented database; be sure that you
# type the path/filename correctly here.
custom_genome_blast='false'
custom_genome_blast_database_path=''
custom_gene_blast='false'
custom_gene_blast_database_path=''
custom_protein_blast='false'
custom_protein_blast_database_path=''

# HMM PROFILE DATABASE SEARCHES. Here we use an hmm search program to search profile databases.

# HMM programs for hmm search against profile databases 
hmmscan='false'

# HMM profiles databases to use
pvogs_hmm_profiles='false'
vogs_hmm_profiles='false'

# HMM profiles database locations 
# Specify locations of your local instances of databases; use full path/filename
pvogs_hmm_profiles_database_path=''
vogs_hmm_profiles_database_path=''

###################################################################################################################
# COMPARATIVE GENOMICS 

# Comparing Gene Profiles across Genomes
# Run this analysis only if you are comparing at least 2 similar genomes.
# The "reference" genome will be the first genome that you listed (above).
# First, enable CompareGeneProfiles (CGP) processing:
CGP='false'

# CGP Matching Parameters. Set minimum %identity cutoff for matching genes.
# Minimum allowed is 30:
cgp_identity_cutoff_gene='60'
cgp_identity_cutoff_protein='60'

###################################################################################################################
# PROCESSING CONTROL and PROGRAM VERBOSITY

# PARALLELISM
# Set HPC to true if distributing multiPhATE2 across compute nodes on a high-performance cluster.
# When HPC is true, a common log is not written.
HPC='false'
# Set phate threads to parallelize PhATE. phate_threads='ALL' uses all available threads. phate_threads='0' turns threading off.
phate_threads='0'
# Set number of threads to be used by blast+. Maximum of 4 threads is suggested.
blast_threads='0'
# Set number of threads to be used by CGP: '0' to turn off; 'ALL' to use all available
cgp_threads='0' 

# CHECKPOINTING
# See README for instructions how to use checkpointing.
# All requisite files must be in place !!!  Set only one checkpoint at a time.
 
# Skip gene calling; re-start at PhATE annotation:
checkpoint_phate='false'
# Skip gene calling and PhATE annotation; re-start at CompareGeneProfiles (CGP) 
checkpoint_cgp='false'
# Skip gene calling, PhATE annotation, and CGP; re-start at Genomics processing
checkpoint_genomics='false'

# VERBOSITY
# Control which messages to print or whether to retain intermediate data.
# Warnings and messages can be voluminous.
# Setting clean raw data to true will remove blast and hmm search raw outputs.
phate_warnings='false'
phate_messages='false'
phate_progress='true'
clean_raw_data='true'
