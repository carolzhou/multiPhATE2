#!/usr/bin/env python3

#######################################################################################
#
# getAnnotations4list.py
#
# Summary: Inputs a file generated by script tallyHomGroups.py and outputs a file  
#    containing the same list of gene identifiers, each with their annotations.
#
# Programmer:  Carol Zhou
#
# Last Update: 24 March 2021
#
#######################################################################################

# This code was developed by Carol L. Ecale Zhou at Lawrence Livermore National Laboratory.
# THIS CODE IS COVERED BY THE GPL3 LICENSE. SEE INCLUDED FILE GPL-3.pdf FOR DETAILS.

VENN = False
#VENN = True

import re, sys, os
sys.stdout.flush()

# Help strings
HELP_STRING = """\nThis script inputs the path/filename of a file containing a list of homologs,\ngenerated by script tallyHomGroups.py,\nor the genomics_loners.out file generated by CGP,\nfollowed by the path to your multiPhATE2 PipelineOutput directory.\nIf using the genomics_loners.out file, then edit this code and set VENN = False.\nThe output generated by this code comprises the same gene\nidentifiers from the homolog list, each with their annotations, tab delimited.\nIt is suggested to capture the output from this script into a file at the command line.\nIf you want to get the annotation for a single gene/protein, use script getAnnotations.py.\nFor more information, type: python3 getAnnotations4list.py usage\n"""
USAGE_STRING = """\nUsage: python3 getAnnotations4list.py <path/filename> <phate directory>\nExample: python3 getAnnotations4list.py ./ABp.lst /home/me/multiPhATE2/PipelineOutput/ > ABp.annot.out\n"""

# Open output file (will contain gene/protein identifiers and annotations
OUT_H = open("./getAnnotations4list.out", 'w')

# Gather parameters. User should input a gene identifier and the PhATE annotation path/filename
phateDir = ""; filename = ""; parameter = ""
#print("TESTING: len(sys.argv) is",len(sys.argv))
#print("TESTING: sys.argv is",sys.argv)
if len(sys.argv) == 1:
    print(HELP_STRING)
    print(USAGE_STRING)
    exit(0)
if len(sys.argv) == 2:
    parameter = sys.argv[1]
    if re.search('help',parameter.lower()):
        print(HELP_STRING)
        exit(0)
    elif re.search('usage',parameter.lower()):
        print(USAGE_STRING)
        exit(0)
    # Get path/filename for list to be annotation tagged.
    filename = sys.argv[1] 
if len(sys.argv) == 3:
    filename = sys.argv[1]
    phateDir = sys.argv[2]
if len(sys.argv) >= 4:
    print(HELP_STRING)
    print(USAGE_STRING)
    exit(0)
    
# Check that the file is where it needs to be
try:
    FILE_H = open(filename,'r') 
except(RuntimeError):
    print("List file,",filename,"cannot be opened. Please check your input parameters.")
    exit(0)

# Check that the phate directory is where it needs to be
isPath = os.path.isdir(phateDir)
if not isPath:
    print("PhATE directory,",phateDir,"cannot be accessed. Please check your input parameters.")
    print(USAGE_STRING)
    exit(0)

# Read through file containing gene/protein identifiers to capture a non-redundant list of the genomes involved
genomeName = ""; genomeString = ""; genomeList = [] 
p_identifier = re.compile('cds\d+')
ID_FILE_H = open(filename,'r')
iLines = ID_FILE_H.read().splitlines()
for iLine in iLines:
    if VENN: # This code block executes if input file was generated by venn scripts
        if re.search("^>",iLine):
            # capture name of genome, which is same as genome's PhATE subdirectory
            (genomeString, contig, identifier) = iLine.split(':')
            genomeName = genomeString.lstrip('>')
            if genomeName not in genomeList:
                genomeList.append(genomeName)
    else: # This code block executes if input file is genomics_loners.out
        match_identifier = re.search(p_identifier,iLine)
        if match_identifier:
            # capture name of genome, which is same as genome's PhATE subdirectory
            (genomeName, contig, identifier) = iLine.split(':')
            if genomeName not in genomeList:
                genomeList.append(genomeName) 
ID_FILE_H.close()
"""
print("Genome list is:")
for genome in genomeList:
    print(genome)
"""
if VENN:
    # Check that each genome's phate_sequenceAnnotation_main.gff file is where it should be
    for genome in genomeList:
        genomeDir = os.path.join(phateDir,genome)
        file2check = os.path.join(genomeDir,"phate_sequenceAnnotation_main.gff")
        if os.path.isfile(file2check):
            pass
            #print("file",file2check,"found!")
        else:
            print("Sorry, I could not fine the PhATE annotation GFF file,",file2check)
            exit(0)
    #print("We are good to go...")

# Re-open gene/protein identifiers file, invoke script getAnnotations.py for each identifier
ID_FILE_H = open(filename,'r')
iLines = ID_FILE_H.read().splitlines()
for iLine in iLines:
    if VENN:
        if re.search ('^>',iLine):
            # Capture name of genome, which is same as genome's PhATE subdirectory
            (genomeString, contig, identifier) = iLine.split(':')
            genomeName = genomeString.lstrip('>')
            # Construct path to annotation subdirectory 
            genomeDir = os.path.join(phateDir,genomeName)
            # Clean the gene/protein identifier string
            identifierString = iLine.rstrip('/')
            identifier = identifierString.lstrip('>')
            # Invoke getAnnotations.py
            command = "python3 getAnnotations.py " + identifier  + ' ' + genomeDir 
            result = os.system(command)
        else:
            print(iLine, flush=True) 
    else:
        match_identifier = re.search(p_identifier,iLine)
        if match_identifier:
            # Capture name of genome, which is same as genome's PhATE subdirectory
            (genomeName, contig, identifierString) = iLine.split(':')
            # Construct path to annotation subdirectory 
            genomeDir = os.path.join(phateDir,genomeName)
            # Clean the gene/protein identifier string
            identifier = iLine.rstrip('/')
            # Invoke getAnnotations.py
            command = "python3 getAnnotations.py " + identifier  + ' ' + genomeDir 
            result = os.system(command)
        else:
            print(iLine, flush=True)

# Reopen identifier file; for each identifier, construct the path to genome's PhATE output directory,
# then invoke getAnnotation.py for each identifier; then print the annotation to file.

# Clean up
OUT_H.close()
