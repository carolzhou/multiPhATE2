How to use the codes for generating data for VENN diagrams (4 genomes)

Use tallyHomGroups.py to generate subsets of homologous genes/proteins. python3 tallyHomGroups.py help

Script tallyHomGroups.py will input the HOMOLOGY_GROUPS/ directory, produced by multiPhATE2's Genomic module. So find that directory under PipelineOutput/GENOMICS/.

Script tallyHomGroups.py computes the sets, {A,B,C,D}, {A,B,C}, {B,C,D}, {A,B}, {A,C}, etc., and prints the CGP-generated identifiers for each corresponding (matched) gene/protein from each genome. It outputs the data (numbers of genes/proteins in each set), which would be entered into the appropriate segment of a 4-way VENN diagram. The "loner" genes/proteins are not computed here, since they are not members of any homology group. The loner counts can be taken from the PipelineOutput/GENOMICS/genomics_loners.out file.

Because there are slight differences in the numbers based on which genome was considered to be the "reference", it is recommended to run multiPhATE2 4 times, once for each genome as "reference" (reference genome is the one listed first in the multiphate.config file). Then, run tallyHomGroups.py over the data for each genome's HOMOLOGY_GROUPS/ directory. The VENN diagram should list data from the perspective of each of the 4 genomes. Note that numbers compared between reference genomes will be very similar, but not identical. Also note that the sets that do not include a reference genome will necessarily have 0 members; for example, If A is reference, then set {B,C,D} will have 0 members, because the code will be searching through homology groups with correspondences between A and other genomes, and if an A gene is not involved, then the homology groups would not be created.

Script tallyHomGroups.py will create files containing the gene/protein identifiers of the appropriate venn sets. These files are labeled by letters: ABC.lst, for example. It's up to you to recall which genome would be 'A' or 'B', etc. But you can always look in the files to see which ones are listed there.

The tallyHomGroups_abcd.py code is "generic", and is untested. The original code was "hard-coded" with the genomes being studied in our group, and the genome names were removed from the code. So to use tallyHomGroups_abcd.py for a different set of genomes, you will need to either keep track of which genome corresponds to 'A', which to 'B', etc., or copy the code and then do a find/replace to modify the code so that the genome names are there.

The gene/protein identifier is assigned by the CompareGeneProfiles (CGP) module of multiPhATE2. It has format:  genomeName:contigName:cds123/+/456/789. Note that the PhATE annotation engine assigns gene/protein identifiers differently, including the gene-caller name and other information. The gene/protein identifiers in CGP were not changed to conform to PhATE because the specifics of CGP's identifiers make computations efficient for that processing. So, how does one correlate a CGP gene/protein identifier to the gene's PhATE annotation results?  Answer:  use script getAnnotations4list.py.

Script getAnnotations4list.py inputs the directory containing the tally sets generated by script tallyHomGroups.py. For example, usage: python3 getAnnotations4list.py ABCD.lst /home/me/multiPhATE2/PipelineOutput/myGenomeSubdir/  Script getAnnotations4list.py searches the phate_sequenceAnnotation_main.gff file for each of the genes/proteins in ABCD.list and pulls the annotation(s) from the last column of the gff.

Alternatively, getAnnotations4list.py can be used to find annotations for "loner" genes/proteins, which are not members of any homology group. However, you must edit the code and switch the VENN boolean variable to False. (Turn back to True when using the HOMOLOGY_GROUPS as input!)

Also, you can find the annotation(s) for a single gene/protein identifier by inputing the identifier directly into script getAnnotations.py. Note that getAnnotations4list.py actually calls getAnnotations.py multiple times "under the hood".  python3 getAnnotations.py help

